/**
 * @Author: 陶鹏飞
 * @Description:
 * @Date: 2018/9/13-10:05
 * @email: taopengfei1223@foxmail.com
 **/
package com.insightfullogic.java8.examples.chapter5.factorial;


/*
任何大于1的自然数n阶乘表示方法：n!=1×2×3×……×n 或 n!=n×(n-1)!　
 */
/*
该栈溢出的还是会栈溢出，其实原因我在开头就已经说了，尾递归这样的写法本身并不会有什么用，依赖的是编译器对尾递归写法的优化，
在很多语言中编译器都对尾递归有优化，然而这些语言中并不包括java，因此在这里我们使用lambda的懒加载(惰性求值)机制来延迟递归
的调用，从而实现栈帧的复用。
 */


/*
利用lambda懒加载的特性完成了递归中栈帧的复用,实现了函数式语言编译器的'尾递归'优化,虽然上面的例子很简单，但是设计的接口和包
装类都是通用的，可以说任何需要使用尾递归的都可以使用上面的代码来实现尾递归的优化，这也算是为编译器帮了点忙吧。
 */